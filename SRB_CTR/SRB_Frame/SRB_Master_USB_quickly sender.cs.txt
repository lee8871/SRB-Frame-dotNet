using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using LibUsbDotNet;
using LibUsbDotNet.LibUsb;
using LibUsbDotNet.Main;
using LibUsbDotNet.LudnMonoLibUsb;
using EC = LibUsbDotNet.Main.ErrorCode;
using System.Runtime.InteropServices;

namespace SRB_CTR.nsFrame
{
    class SRB_Master_USB : ISRB_Master
    {
        private UsbDevice selected_device;
        private string selected_device_name;
        private UsbEndpointReader srb_reader;
        private UsbEndpointWriter srb_writer;
        private Dictionary<string, UsbRegistry> devicesDIC = new Dictionary<string,UsbRegistry>();
        SRB_master_USB_uc config_form;

        Log_Writer log;
        public SRB_Master_USB()
        {
            scanDevice();
            if (devicesDIC.Count == 1)
            {
                OpenPort(devicesDIC.Keys.ToArray()[0]);
            }
            log = new Log_Writer("USB");
            log.add("new usb log!");
        }


        public string getPortName()
        {
            if (Is_opened())
            {
                return selected_device_name;
            }
            else
            {
                return "---";
            }

        }
        bool record_port_data = true;
        public bool Record_port_data
        {
            get { return record_port_data; }
            set { record_port_data = value; }
        }
        public override System.Windows.Forms.Control getConfigControl()
        {
            if (config_form == null)
            {
                config_form = new SRB_master_USB_uc(this);
            }
            return config_form;
        }

        internal void configFormClosed()
        {
            config_form = null;
        }


        public override bool Is_opened()
        {
            if (selected_device == null)
            {
                return false;
            }
            return selected_device.IsOpen;
        }

        internal void OpenPort(string portName)
        {
            ClosePort();
            selected_device = devicesDIC[portName].Device;
            selected_device_name = portName;
            if (!(selected_device.Open()))
            {
                throw new Exception(string.Format("open USB (port)device {0} fail", portName));
            }
            IUsbDevice wholeUsbDevice = selected_device as IUsbDevice;
            if (!ReferenceEquals(wholeUsbDevice, null))
            {
                // This is a "whole" USB device. Before it can be used, 
                // the desired configuration and interface must be selected.
                // Select config #1
                wholeUsbDevice.SetConfiguration(1);
                // Claim interface #0.
                wholeUsbDevice.ClaimInterface(0);
            }
            else
            {
                throw new Exception(string.Format("selected_device can not as IUsbDevice"));
            }
            srb_reader = selected_device.OpenEndpointReader((ReadEndpointID)(1 | 0x80),1000,EndpointType.Interrupt);
            srb_writer = selected_device.OpenEndpointWriter((WriteEndpointID)2);
            // srb_reader.DataReceived += mEp_DataReceived;
            srb_reader.Flush();
        }

        internal void ClosePort()
        {
            if (Is_opened())
            {

                srb_reader.DataReceivedEnabled = false;
                // srb_reader.DataReceived -= mEp_DataReceived;
                srb_reader.Dispose();
                srb_reader = null; 
                srb_writer.Abort();
                srb_writer.Dispose();
                srb_writer = null;

                IUsbDevice wholeUsbDevice = selected_device as IUsbDevice;
                if (!ReferenceEquals(wholeUsbDevice, null))
                {
                    // Release interface #0.
                    wholeUsbDevice.ReleaseInterface(0);
                }

                selected_device.Close();
            }
        }



        internal string[] getPortTable()
        {
            scanDevice();
            return devicesDIC.Keys.ToArray();

        }
        private void scanDevice()
        {
            devicesDIC.Clear();
            UsbRegDeviceList mRegDevices;
            mRegDevices = UsbDevice.AllLibUsbDevices;
            string product_name;
            string device_name;
            foreach (UsbRegistry regDevice in mRegDevices)
            {
                regDevice.Device.GetString(out product_name, 0x0409, 2);
                if (product_name == "SRB-USB")
                {
                    regDevice.Device.GetString(out device_name, 0x0409, 3);
                    devicesDIC[device_name] = regDevice;
                }
            }
        }




















        #region  //aboout time record
        int last_send_time_cost = 0;
        public int Last_send_time_cost
        {
            get { return last_send_time_cost; }
        }

        int last_recv_time_cost = 0;
        public int Last_recv_time_cost
        {
            get { return last_recv_time_cost; }
        }
        long time_record;
        #endregion




        public override bool doAccess(Access ac)
        {
            Access[] acs = new Access[1];
            acs[0] = ac;
            return doAccess(acs, 1);
        }







        #region Access

        Access[] accesses;
        int access_num;
        Queue<byte> readBQ = new Queue<byte>();
        Queue<byte> writeBQ = new Queue<byte>();

        public override bool doAccess(Access[] acs, int acs_num = -1)
        {
            if (acs_num == -1)
            {
                acs_num = acs.Length;
            }
            if (this.Is_opened() == false)
            {
                for (int acs_counter = 0; acs_counter < acs_num; acs_counter++)
                {
                    acs[acs_counter].status = Access.Status.SendFail;
                }
                return false;
            }
            if (acs_num > 128)
            {
                throw new Exception(string.Format("Max num of accesses to send is 128"));
            }
            accesses = acs;
            access_num = acs_num;
            log.add("___   new access   ___ num = " + acs_num);
            bool need_next_loop;  // if need next loop  
            load_access_counter = 0;
            do
            {
                need_next_loop = false;  // if need next loop              
                need_next_loop = lodeAccessToQueue();
                need_next_loop = need_next_loop || sendOutPkg();
                need_next_loop = need_next_loop || recvInPkg();
                need_next_loop = need_next_loop || readAccessFromQueue();
            }
            while (need_next_loop);

            last_send_time_cost = (int)(Stopwatch.GetTimestamp() - time_record);
            time_record += last_send_time_cost;
            return true;
        }
        int load_access_counter;
        private bool lodeAccessToQueue()
        {
            while(true)
            {
                if(load_access_counter<access_num)
                {
                    lodeOneAccess(accesses[load_access_counter]);
                    load_access_counter++;
                    if (writeBQ.Count >= 64)
                    {
                        return true;
                    }
                }
                else
                {
                    return false;
                }
            }
                   
        }
        private void lodeOneAccess(Access access)
        {
            writeBQ.Enqueue((byte)load_access_counter);//sno
            writeBQ.Enqueue(access.Addr);
            writeBQ.Enqueue(access.Send_bfc);
            foreach(byte b in access.Send_data)
            {
                writeBQ.Enqueue(b);
            }
        }
        byte[] send_to_usb_buf = new byte[64];
        private bool sendOutPkg()
        {
            int send_len = writeBQ.Count;
            if (send_len > 64)
            {
                send_len = 64;
            }
            if (send_len == 0)
            {
                return false;
            }
            for (int i = 0;i< send_len; i++)
            {
                send_to_usb_buf[i] = writeBQ.Dequeue();
            }
            int usb_send;
            if (srb_writer.Write(send_to_usb_buf, 0, send_len,10, out usb_send) == ErrorCode.None)
            {
                log.add("USB send Out pkg "+ send_len+"   " + send_to_usb_buf.ToHexSt(send_len));
            }
            else
            {
                log.add("write fail ");
            }
            if(writeBQ.Count==0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        byte[] recv_from_usb_buf = new byte[64];
        private bool recvInPkg()
        {
            int recv_num;
            if (srb_reader.Read(recv_from_usb_buf, 10, out recv_num) == ErrorCode.None)
            {
                log.add("USB read in pkg " + recv_num + "   " + recv_from_usb_buf.ToHexSt(recv_num));
                for (int i = 0; i < recv_num; i++)
                {
                    readBQ.Enqueue(recv_from_usb_buf[i]);
                }
            }
            else
            {
                log.add("read fail");
            }
            return false;
        }

        byte[] packages = new byte[256];
        private bool readAccessFromQueue()
        {
            int recv_len = readBQ.Count();
            for(int i = 0;i < recv_len;i++)
            {
                packages[i] = readBQ.Dequeue();

            }
            log.add("read recv some data: " + packages.ToHexSt(recv_len));
            return false;
        }

        #endregion

    }
}
